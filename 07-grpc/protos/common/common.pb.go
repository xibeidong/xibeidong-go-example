// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: common.proto

// 指定等会文件生成出来的package

package common

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// 定义request model
type RequestSay struct {
	Str string `protobuf:"bytes,1,opt,name=str,proto3" json:"str,omitempty"`
	// 可以用map
	Data                 map[string]string `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *RequestSay) Reset()         { *m = RequestSay{} }
func (m *RequestSay) String() string { return proto.CompactTextString(m) }
func (*RequestSay) ProtoMessage()    {}
func (*RequestSay) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{0}
}
func (m *RequestSay) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestSay) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestSay.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestSay) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestSay.Merge(m, src)
}
func (m *RequestSay) XXX_Size() int {
	return m.Size()
}
func (m *RequestSay) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestSay.DiscardUnknown(m)
}

var xxx_messageInfo_RequestSay proto.InternalMessageInfo

func (m *RequestSay) GetStr() string {
	if m != nil {
		return m.Str
	}
	return ""
}

func (m *RequestSay) GetData() map[string]string {
	if m != nil {
		return m.Data
	}
	return nil
}

// 定义response model
type ReplySay struct {
	Str                  string   `protobuf:"bytes,1,opt,name=str,proto3" json:"str,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReplySay) Reset()         { *m = ReplySay{} }
func (m *ReplySay) String() string { return proto.CompactTextString(m) }
func (*ReplySay) ProtoMessage()    {}
func (*ReplySay) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{1}
}
func (m *ReplySay) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplySay) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplySay.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplySay) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplySay.Merge(m, src)
}
func (m *ReplySay) XXX_Size() int {
	return m.Size()
}
func (m *ReplySay) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplySay.DiscardUnknown(m)
}

var xxx_messageInfo_ReplySay proto.InternalMessageInfo

func (m *ReplySay) GetStr() string {
	if m != nil {
		return m.Str
	}
	return ""
}

// 定义response model
type ReplyCommon struct {
	Status               bool     `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Data                 string   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReplyCommon) Reset()         { *m = ReplyCommon{} }
func (m *ReplyCommon) String() string { return proto.CompactTextString(m) }
func (*ReplyCommon) ProtoMessage()    {}
func (*ReplyCommon) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{2}
}
func (m *ReplyCommon) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplyCommon) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplyCommon.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplyCommon) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplyCommon.Merge(m, src)
}
func (m *ReplyCommon) XXX_Size() int {
	return m.Size()
}
func (m *ReplyCommon) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplyCommon.DiscardUnknown(m)
}

var xxx_messageInfo_ReplyCommon proto.InternalMessageInfo

func (m *ReplyCommon) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func (m *ReplyCommon) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type Person struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id                   int32    `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Person) Reset()         { *m = Person{} }
func (m *Person) String() string { return proto.CompactTextString(m) }
func (*Person) ProtoMessage()    {}
func (*Person) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{3}
}
func (m *Person) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Person) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Person.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Person) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Person.Merge(m, src)
}
func (m *Person) XXX_Size() int {
	return m.Size()
}
func (m *Person) XXX_DiscardUnknown() {
	xxx_messageInfo_Person.DiscardUnknown(m)
}

var xxx_messageInfo_Person proto.InternalMessageInfo

func (m *Person) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Person) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type Point struct {
	X                    float32  `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	Y                    float32  `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"`
	Z                    float32  `protobuf:"fixed32,3,opt,name=z,proto3" json:"z,omitempty"`
	PersonId             int32    `protobuf:"varint,4,opt,name=person_id,json=personId,proto3" json:"person_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Point) Reset()         { *m = Point{} }
func (m *Point) String() string { return proto.CompactTextString(m) }
func (*Point) ProtoMessage()    {}
func (*Point) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{4}
}
func (m *Point) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Point) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Point.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Point) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Point.Merge(m, src)
}
func (m *Point) XXX_Size() int {
	return m.Size()
}
func (m *Point) XXX_DiscardUnknown() {
	xxx_messageInfo_Point.DiscardUnknown(m)
}

var xxx_messageInfo_Point proto.InternalMessageInfo

func (m *Point) GetX() float32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *Point) GetY() float32 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *Point) GetZ() float32 {
	if m != nil {
		return m.Z
	}
	return 0
}

func (m *Point) GetPersonId() int32 {
	if m != nil {
		return m.PersonId
	}
	return 0
}

func init() {
	proto.RegisterType((*RequestSay)(nil), "common.RequestSay")
	proto.RegisterMapType((map[string]string)(nil), "common.RequestSay.DataEntry")
	proto.RegisterType((*ReplySay)(nil), "common.ReplySay")
	proto.RegisterType((*ReplyCommon)(nil), "common.ReplyCommon")
	proto.RegisterType((*Person)(nil), "common.Person")
	proto.RegisterType((*Point)(nil), "common.Point")
}

func init() { proto.RegisterFile("common.proto", fileDescriptor_555bd8c177793206) }

var fileDescriptor_555bd8c177793206 = []byte{
	// 384 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x4d, 0xcf, 0xd2, 0x40,
	0x10, 0xc7, 0xbb, 0x2d, 0x34, 0xed, 0xf0, 0x12, 0x32, 0x1a, 0xd3, 0x54, 0xd2, 0x90, 0x3d, 0xf5,
	0xa0, 0x15, 0xd1, 0xc4, 0x97, 0xa3, 0x68, 0x88, 0x17, 0x43, 0x96, 0x9b, 0x17, 0xb3, 0xda, 0x4d,
	0x6c, 0x80, 0x16, 0xdb, 0x85, 0x50, 0xbe, 0x81, 0xdf, 0xc0, 0x8f, 0xe4, 0xd1, 0x9b, 0x57, 0x83,
	0x5f, 0xe4, 0xc9, 0xee, 0x16, 0x08, 0x79, 0x9e, 0xc3, 0x73, 0x9b, 0xff, 0xcc, 0x6f, 0xfe, 0x33,
	0x3b, 0x59, 0xe8, 0x7e, 0x2b, 0xd6, 0xeb, 0x22, 0x4f, 0x36, 0x65, 0x21, 0x0b, 0x74, 0x8d, 0xa2,
	0x3f, 0x09, 0x00, 0x13, 0x3f, 0xb6, 0xa2, 0x92, 0x0b, 0x5e, 0xe3, 0x00, 0x9c, 0x4a, 0x96, 0x01,
	0x19, 0x91, 0xd8, 0x67, 0x2a, 0xc4, 0x31, 0xb4, 0x52, 0x2e, 0x79, 0x60, 0x8f, 0x9c, 0xb8, 0x33,
	0x19, 0x26, 0x8d, 0xcb, 0xa5, 0x27, 0x79, 0xcf, 0x25, 0xff, 0x90, 0xcb, 0xb2, 0x66, 0x9a, 0x0c,
	0x5f, 0x81, 0x7f, 0x4e, 0x29, 0xc3, 0xa5, 0xa8, 0x4f, 0x86, 0x4b, 0x51, 0xe3, 0x43, 0x68, 0xef,
	0xf8, 0x6a, 0x2b, 0x02, 0x5b, 0xe7, 0x8c, 0x78, 0x6b, 0xbf, 0x26, 0x74, 0x08, 0x1e, 0x13, 0x9b,
	0x55, 0x7d, 0xe7, 0x22, 0xf4, 0x0d, 0x74, 0x74, 0x75, 0xaa, 0x17, 0xc0, 0x47, 0xe0, 0x56, 0x92,
	0xcb, 0x6d, 0xa5, 0x19, 0x8f, 0x35, 0x0a, 0xf1, 0xbc, 0xaf, 0xea, 0xd4, 0x31, 0x7d, 0x02, 0xee,
	0x5c, 0x94, 0x55, 0x91, 0xab, 0x6a, 0xce, 0xd7, 0xa2, 0xf1, 0xd5, 0x31, 0xf6, 0xc1, 0xce, 0x52,
	0xcd, 0xb7, 0x99, 0x9d, 0xa5, 0xf4, 0x13, 0xb4, 0xe7, 0x45, 0x96, 0x4b, 0xec, 0x02, 0xd9, 0x6b,
	0xd2, 0x66, 0x64, 0xaf, 0x54, 0xad, 0x29, 0x9b, 0x91, 0x5a, 0xa9, 0x43, 0xe0, 0x18, 0x75, 0xc0,
	0xc7, 0xe0, 0x6f, 0xf4, 0x80, 0x2f, 0x59, 0x1a, 0xb4, 0xb4, 0x93, 0x67, 0x12, 0x1f, 0xd3, 0xc9,
	0x5f, 0x02, 0x3d, 0x33, 0x7e, 0x56, 0x0a, 0x21, 0x45, 0x89, 0x4f, 0xc1, 0x51, 0x6f, 0xc4, 0xdb,
	0xc7, 0x0c, 0x07, 0x97, 0x9c, 0xb9, 0x04, 0xb5, 0x30, 0x01, 0x7f, 0x26, 0xa4, 0xde, 0xa9, 0xc2,
	0xfe, 0x09, 0x30, 0x96, 0x61, 0xef, 0xac, 0x55, 0x9d, 0x5a, 0x63, 0x82, 0x2f, 0x01, 0x16, 0x7c,
	0x27, 0x9a, 0x86, 0x6b, 0x20, 0x7c, 0x70, 0x35, 0xc0, 0x1c, 0x93, 0x5a, 0x31, 0xc1, 0xe7, 0x00,
	0xd3, 0xef, 0xfc, 0xbe, 0x63, 0x62, 0x32, 0x26, 0xef, 0xc2, 0xdf, 0xc7, 0x88, 0xfc, 0x39, 0x46,
	0xe4, 0xdf, 0x31, 0x22, 0xbf, 0xfe, 0x47, 0xd6, 0x67, 0x2f, 0x79, 0x66, 0xb8, 0xaf, 0xae, 0xfe,
	0x67, 0x2f, 0x6e, 0x02, 0x00, 0x00, 0xff, 0xff, 0xc1, 0xf9, 0x9c, 0xda, 0x77, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PersonGreeterClient is the client API for PersonGreeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PersonGreeterClient interface {
	// 一元RPC。客户端发送一个请求到服务端，服务端响应一个请求。
	Say(ctx context.Context, in *RequestSay, opts ...grpc.CallOption) (*ReplySay, error)
	// 服务端流RPC，客户端发送一个请求到服务端，
	// 获取到一个流去连续读取返回的消息，直到消息全部获取。gRPC保证单个请求的消息顺序。
	GetPoints(ctx context.Context, in *Person, opts ...grpc.CallOption) (PersonGreeter_GetPointsClient, error)
	// 客户端给服务器通过流写入连续的消息，一旦客户端完成了消息写入，
	// 就等待服务端读取完成然后返回一个响应。同时gRPC也会保证单个请求的消息顺序。
	SavePoints(ctx context.Context, opts ...grpc.CallOption) (PersonGreeter_SavePointsClient, error)
	// 双向流。客户端和服务端都可以通过 read-write流发送一个连续的消息。
	// 两个流之间的操作是相互独立的。
	// 所以，客户端和服务端可以同时进行流的读写。
	ChatPoints(ctx context.Context, opts ...grpc.CallOption) (PersonGreeter_ChatPointsClient, error)
}

type personGreeterClient struct {
	cc *grpc.ClientConn
}

func NewPersonGreeterClient(cc *grpc.ClientConn) PersonGreeterClient {
	return &personGreeterClient{cc}
}

func (c *personGreeterClient) Say(ctx context.Context, in *RequestSay, opts ...grpc.CallOption) (*ReplySay, error) {
	out := new(ReplySay)
	err := c.cc.Invoke(ctx, "/common.PersonGreeter/Say", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personGreeterClient) GetPoints(ctx context.Context, in *Person, opts ...grpc.CallOption) (PersonGreeter_GetPointsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PersonGreeter_serviceDesc.Streams[0], "/common.PersonGreeter/GetPoints", opts...)
	if err != nil {
		return nil, err
	}
	x := &personGreeterGetPointsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PersonGreeter_GetPointsClient interface {
	Recv() (*Point, error)
	grpc.ClientStream
}

type personGreeterGetPointsClient struct {
	grpc.ClientStream
}

func (x *personGreeterGetPointsClient) Recv() (*Point, error) {
	m := new(Point)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *personGreeterClient) SavePoints(ctx context.Context, opts ...grpc.CallOption) (PersonGreeter_SavePointsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PersonGreeter_serviceDesc.Streams[1], "/common.PersonGreeter/SavePoints", opts...)
	if err != nil {
		return nil, err
	}
	x := &personGreeterSavePointsClient{stream}
	return x, nil
}

type PersonGreeter_SavePointsClient interface {
	Send(*Point) error
	CloseAndRecv() (*ReplyCommon, error)
	grpc.ClientStream
}

type personGreeterSavePointsClient struct {
	grpc.ClientStream
}

func (x *personGreeterSavePointsClient) Send(m *Point) error {
	return x.ClientStream.SendMsg(m)
}

func (x *personGreeterSavePointsClient) CloseAndRecv() (*ReplyCommon, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ReplyCommon)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *personGreeterClient) ChatPoints(ctx context.Context, opts ...grpc.CallOption) (PersonGreeter_ChatPointsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PersonGreeter_serviceDesc.Streams[2], "/common.PersonGreeter/ChatPoints", opts...)
	if err != nil {
		return nil, err
	}
	x := &personGreeterChatPointsClient{stream}
	return x, nil
}

type PersonGreeter_ChatPointsClient interface {
	Send(*Person) error
	Recv() (*Point, error)
	grpc.ClientStream
}

type personGreeterChatPointsClient struct {
	grpc.ClientStream
}

func (x *personGreeterChatPointsClient) Send(m *Person) error {
	return x.ClientStream.SendMsg(m)
}

func (x *personGreeterChatPointsClient) Recv() (*Point, error) {
	m := new(Point)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PersonGreeterServer is the server API for PersonGreeter service.
type PersonGreeterServer interface {
	// 一元RPC。客户端发送一个请求到服务端，服务端响应一个请求。
	Say(context.Context, *RequestSay) (*ReplySay, error)
	// 服务端流RPC，客户端发送一个请求到服务端，
	// 获取到一个流去连续读取返回的消息，直到消息全部获取。gRPC保证单个请求的消息顺序。
	GetPoints(*Person, PersonGreeter_GetPointsServer) error
	// 客户端给服务器通过流写入连续的消息，一旦客户端完成了消息写入，
	// 就等待服务端读取完成然后返回一个响应。同时gRPC也会保证单个请求的消息顺序。
	SavePoints(PersonGreeter_SavePointsServer) error
	// 双向流。客户端和服务端都可以通过 read-write流发送一个连续的消息。
	// 两个流之间的操作是相互独立的。
	// 所以，客户端和服务端可以同时进行流的读写。
	ChatPoints(PersonGreeter_ChatPointsServer) error
}

// UnimplementedPersonGreeterServer can be embedded to have forward compatible implementations.
type UnimplementedPersonGreeterServer struct {
}

func (*UnimplementedPersonGreeterServer) Say(ctx context.Context, req *RequestSay) (*ReplySay, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Say not implemented")
}
func (*UnimplementedPersonGreeterServer) GetPoints(req *Person, srv PersonGreeter_GetPointsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPoints not implemented")
}
func (*UnimplementedPersonGreeterServer) SavePoints(srv PersonGreeter_SavePointsServer) error {
	return status.Errorf(codes.Unimplemented, "method SavePoints not implemented")
}
func (*UnimplementedPersonGreeterServer) ChatPoints(srv PersonGreeter_ChatPointsServer) error {
	return status.Errorf(codes.Unimplemented, "method ChatPoints not implemented")
}

func RegisterPersonGreeterServer(s *grpc.Server, srv PersonGreeterServer) {
	s.RegisterService(&_PersonGreeter_serviceDesc, srv)
}

func _PersonGreeter_Say_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSay)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonGreeterServer).Say(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.PersonGreeter/Say",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonGreeterServer).Say(ctx, req.(*RequestSay))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonGreeter_GetPoints_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Person)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PersonGreeterServer).GetPoints(m, &personGreeterGetPointsServer{stream})
}

type PersonGreeter_GetPointsServer interface {
	Send(*Point) error
	grpc.ServerStream
}

type personGreeterGetPointsServer struct {
	grpc.ServerStream
}

func (x *personGreeterGetPointsServer) Send(m *Point) error {
	return x.ServerStream.SendMsg(m)
}

func _PersonGreeter_SavePoints_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PersonGreeterServer).SavePoints(&personGreeterSavePointsServer{stream})
}

type PersonGreeter_SavePointsServer interface {
	SendAndClose(*ReplyCommon) error
	Recv() (*Point, error)
	grpc.ServerStream
}

type personGreeterSavePointsServer struct {
	grpc.ServerStream
}

func (x *personGreeterSavePointsServer) SendAndClose(m *ReplyCommon) error {
	return x.ServerStream.SendMsg(m)
}

func (x *personGreeterSavePointsServer) Recv() (*Point, error) {
	m := new(Point)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PersonGreeter_ChatPoints_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PersonGreeterServer).ChatPoints(&personGreeterChatPointsServer{stream})
}

type PersonGreeter_ChatPointsServer interface {
	Send(*Point) error
	Recv() (*Person, error)
	grpc.ServerStream
}

type personGreeterChatPointsServer struct {
	grpc.ServerStream
}

func (x *personGreeterChatPointsServer) Send(m *Point) error {
	return x.ServerStream.SendMsg(m)
}

func (x *personGreeterChatPointsServer) Recv() (*Person, error) {
	m := new(Person)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _PersonGreeter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "common.PersonGreeter",
	HandlerType: (*PersonGreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Say",
			Handler:    _PersonGreeter_Say_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetPoints",
			Handler:       _PersonGreeter_GetPoints_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SavePoints",
			Handler:       _PersonGreeter_SavePoints_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ChatPoints",
			Handler:       _PersonGreeter_ChatPoints_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "common.proto",
}

func (m *RequestSay) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestSay) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestSay) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		for k := range m.Data {
			v := m.Data[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintCommon(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintCommon(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintCommon(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Str) > 0 {
		i -= len(m.Str)
		copy(dAtA[i:], m.Str)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Str)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReplySay) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplySay) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplySay) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Str) > 0 {
		i -= len(m.Str)
		copy(dAtA[i:], m.Str)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Str)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReplyCommon) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyCommon) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplyCommon) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status {
		i--
		if m.Status {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Person) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Person) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Person) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Point) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Point) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Point) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PersonId != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.PersonId))
		i--
		dAtA[i] = 0x20
	}
	if m.Z != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Z))))
		i--
		dAtA[i] = 0x1d
	}
	if m.Y != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Y))))
		i--
		dAtA[i] = 0x15
	}
	if m.X != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.X))))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func encodeVarintCommon(dAtA []byte, offset int, v uint64) int {
	offset -= sovCommon(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RequestSay) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Str)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if len(m.Data) > 0 {
		for k, v := range m.Data {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovCommon(uint64(len(k))) + 1 + len(v) + sovCommon(uint64(len(v)))
			n += mapEntrySize + 1 + sovCommon(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReplySay) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Str)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReplyCommon) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status {
		n += 2
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Person) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovCommon(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Point) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.X != 0 {
		n += 5
	}
	if m.Y != 0 {
		n += 5
	}
	if m.Z != 0 {
		n += 5
	}
	if m.PersonId != 0 {
		n += 1 + sovCommon(uint64(m.PersonId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCommon(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCommon(x uint64) (n int) {
	return sovCommon(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RequestSay) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestSay: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestSay: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Str", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Str = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCommon
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCommon
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCommon
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCommon
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCommon
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthCommon
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthCommon
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCommon(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthCommon
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Data[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplySay) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplySay: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplySay: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Str", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Str = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyCommon) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyCommon: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyCommon: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Person) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Person: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Person: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Point) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Point: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Point: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.X = float32(math.Float32frombits(v))
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Y = float32(math.Float32frombits(v))
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Z", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Z = float32(math.Float32frombits(v))
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PersonId", wireType)
			}
			m.PersonId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PersonId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCommon(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCommon
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCommon
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCommon
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCommon        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCommon          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCommon = fmt.Errorf("proto: unexpected end of group")
)
