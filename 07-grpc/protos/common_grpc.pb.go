// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.4.0
// source: common.proto

package common

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PersonGreeterClient is the client API for PersonGreeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PersonGreeterClient interface {
	// 一元RPC。客户端发送一个请求到服务端，服务端响应一个请求。
	Say(ctx context.Context, in *RequestSay, opts ...grpc.CallOption) (*ReplySay, error)
	//服务端流RPC，客户端发送一个请求到服务端，
	// 获取到一个流去连续读取返回的消息，直到消息全部获取。gRPC保证单个请求的消息顺序。
	GetPoints(ctx context.Context, in *Person, opts ...grpc.CallOption) (PersonGreeter_GetPointsClient, error)
	//客户端给服务器通过流写入连续的消息，一旦客户端完成了消息写入，
	// 就等待服务端读取完成然后返回一个响应。同时gRPC也会保证单个请求的消息顺序。
	SavePoints(ctx context.Context, opts ...grpc.CallOption) (PersonGreeter_SavePointsClient, error)
	//双向流。客户端和服务端都可以通过 read-write流发送一个连续的消息。
	// 两个流之间的操作是相互独立的。
	// 所以，客户端和服务端可以同时进行流的读写。
	ChatPoints(ctx context.Context, opts ...grpc.CallOption) (PersonGreeter_ChatPointsClient, error)
}

type personGreeterClient struct {
	cc grpc.ClientConnInterface
}

func NewPersonGreeterClient(cc grpc.ClientConnInterface) PersonGreeterClient {
	return &personGreeterClient{cc}
}

func (c *personGreeterClient) Say(ctx context.Context, in *RequestSay, opts ...grpc.CallOption) (*ReplySay, error) {
	out := new(ReplySay)
	err := c.cc.Invoke(ctx, "/common.PersonGreeter/Say", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personGreeterClient) GetPoints(ctx context.Context, in *Person, opts ...grpc.CallOption) (PersonGreeter_GetPointsClient, error) {
	stream, err := c.cc.NewStream(ctx, &PersonGreeter_ServiceDesc.Streams[0], "/common.PersonGreeter/GetPoints", opts...)
	if err != nil {
		return nil, err
	}
	x := &personGreeterGetPointsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PersonGreeter_GetPointsClient interface {
	Recv() (*Point, error)
	grpc.ClientStream
}

type personGreeterGetPointsClient struct {
	grpc.ClientStream
}

func (x *personGreeterGetPointsClient) Recv() (*Point, error) {
	m := new(Point)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *personGreeterClient) SavePoints(ctx context.Context, opts ...grpc.CallOption) (PersonGreeter_SavePointsClient, error) {
	stream, err := c.cc.NewStream(ctx, &PersonGreeter_ServiceDesc.Streams[1], "/common.PersonGreeter/SavePoints", opts...)
	if err != nil {
		return nil, err
	}
	x := &personGreeterSavePointsClient{stream}
	return x, nil
}

type PersonGreeter_SavePointsClient interface {
	Send(*Point) error
	CloseAndRecv() (*ReplyCommon, error)
	grpc.ClientStream
}

type personGreeterSavePointsClient struct {
	grpc.ClientStream
}

func (x *personGreeterSavePointsClient) Send(m *Point) error {
	return x.ClientStream.SendMsg(m)
}

func (x *personGreeterSavePointsClient) CloseAndRecv() (*ReplyCommon, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ReplyCommon)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *personGreeterClient) ChatPoints(ctx context.Context, opts ...grpc.CallOption) (PersonGreeter_ChatPointsClient, error) {
	stream, err := c.cc.NewStream(ctx, &PersonGreeter_ServiceDesc.Streams[2], "/common.PersonGreeter/ChatPoints", opts...)
	if err != nil {
		return nil, err
	}
	x := &personGreeterChatPointsClient{stream}
	return x, nil
}

type PersonGreeter_ChatPointsClient interface {
	Send(*Person) error
	Recv() (*Point, error)
	grpc.ClientStream
}

type personGreeterChatPointsClient struct {
	grpc.ClientStream
}

func (x *personGreeterChatPointsClient) Send(m *Person) error {
	return x.ClientStream.SendMsg(m)
}

func (x *personGreeterChatPointsClient) Recv() (*Point, error) {
	m := new(Point)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PersonGreeterServer is the server API for PersonGreeter service.
// All implementations must embed UnimplementedPersonGreeterServer
// for forward compatibility
type PersonGreeterServer interface {
	// 一元RPC。客户端发送一个请求到服务端，服务端响应一个请求。
	Say(context.Context, *RequestSay) (*ReplySay, error)
	//服务端流RPC，客户端发送一个请求到服务端，
	// 获取到一个流去连续读取返回的消息，直到消息全部获取。gRPC保证单个请求的消息顺序。
	GetPoints(*Person, PersonGreeter_GetPointsServer) error
	//客户端给服务器通过流写入连续的消息，一旦客户端完成了消息写入，
	// 就等待服务端读取完成然后返回一个响应。同时gRPC也会保证单个请求的消息顺序。
	SavePoints(PersonGreeter_SavePointsServer) error
	//双向流。客户端和服务端都可以通过 read-write流发送一个连续的消息。
	// 两个流之间的操作是相互独立的。
	// 所以，客户端和服务端可以同时进行流的读写。
	ChatPoints(PersonGreeter_ChatPointsServer) error
	mustEmbedUnimplementedPersonGreeterServer()
}

// UnimplementedPersonGreeterServer must be embedded to have forward compatible implementations.
type UnimplementedPersonGreeterServer struct {
}

func (UnimplementedPersonGreeterServer) Say(context.Context, *RequestSay) (*ReplySay, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Say not implemented")
}
func (UnimplementedPersonGreeterServer) GetPoints(*Person, PersonGreeter_GetPointsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPoints not implemented")
}
func (UnimplementedPersonGreeterServer) SavePoints(PersonGreeter_SavePointsServer) error {
	return status.Errorf(codes.Unimplemented, "method SavePoints not implemented")
}
func (UnimplementedPersonGreeterServer) ChatPoints(PersonGreeter_ChatPointsServer) error {
	return status.Errorf(codes.Unimplemented, "method ChatPoints not implemented")
}
func (UnimplementedPersonGreeterServer) mustEmbedUnimplementedPersonGreeterServer() {}

// UnsafePersonGreeterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PersonGreeterServer will
// result in compilation errors.
type UnsafePersonGreeterServer interface {
	mustEmbedUnimplementedPersonGreeterServer()
}

func RegisterPersonGreeterServer(s grpc.ServiceRegistrar, srv PersonGreeterServer) {
	s.RegisterService(&PersonGreeter_ServiceDesc, srv)
}

func _PersonGreeter_Say_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSay)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonGreeterServer).Say(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.PersonGreeter/Say",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonGreeterServer).Say(ctx, req.(*RequestSay))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonGreeter_GetPoints_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Person)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PersonGreeterServer).GetPoints(m, &personGreeterGetPointsServer{stream})
}

type PersonGreeter_GetPointsServer interface {
	Send(*Point) error
	grpc.ServerStream
}

type personGreeterGetPointsServer struct {
	grpc.ServerStream
}

func (x *personGreeterGetPointsServer) Send(m *Point) error {
	return x.ServerStream.SendMsg(m)
}

func _PersonGreeter_SavePoints_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PersonGreeterServer).SavePoints(&personGreeterSavePointsServer{stream})
}

type PersonGreeter_SavePointsServer interface {
	SendAndClose(*ReplyCommon) error
	Recv() (*Point, error)
	grpc.ServerStream
}

type personGreeterSavePointsServer struct {
	grpc.ServerStream
}

func (x *personGreeterSavePointsServer) SendAndClose(m *ReplyCommon) error {
	return x.ServerStream.SendMsg(m)
}

func (x *personGreeterSavePointsServer) Recv() (*Point, error) {
	m := new(Point)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PersonGreeter_ChatPoints_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PersonGreeterServer).ChatPoints(&personGreeterChatPointsServer{stream})
}

type PersonGreeter_ChatPointsServer interface {
	Send(*Point) error
	Recv() (*Person, error)
	grpc.ServerStream
}

type personGreeterChatPointsServer struct {
	grpc.ServerStream
}

func (x *personGreeterChatPointsServer) Send(m *Point) error {
	return x.ServerStream.SendMsg(m)
}

func (x *personGreeterChatPointsServer) Recv() (*Person, error) {
	m := new(Person)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PersonGreeter_ServiceDesc is the grpc.ServiceDesc for PersonGreeter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PersonGreeter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "common.PersonGreeter",
	HandlerType: (*PersonGreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Say",
			Handler:    _PersonGreeter_Say_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetPoints",
			Handler:       _PersonGreeter_GetPoints_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SavePoints",
			Handler:       _PersonGreeter_SavePoints_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ChatPoints",
			Handler:       _PersonGreeter_ChatPoints_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "common.proto",
}
